@prefix : <#> .
@prefix ibm: <http://tok450s.lan:8080/ldbbc/ibm-vocab.ttl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix sparql-result: <http://www.w3.org/2005/sparql-results#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix http: <http://www.w3.org/2011/http#>.
@prefix http_m: <http://www.w3.org/2011/http-methods#>.


# Workflow-specific Prefixes
@prefix mock: <http://mock-server.lan:3000/mock/rdf#> .
@prefix rfid-bright: <http://t2-rest-bright.lan/#> .
@prefix rfid-dark: <http://t2-rest-dark.lan/#> .
@prefix rfid-ambient: <http://t2-rest-rfid-ambient.lan/rfid#> .
@prefix ambient-light: <http://t2-rest-rfid-ambient.lan/ambient/light#> .
@prefix ambient-sound: <http://t2-rest-rfid-ambient.lan/ambient/sound#> .
@prefix speaker: <http://t2-rest-speaker.lan/#> .



# Workflow
:EvacuationWorkflowModel
    a ibm:WorkflowModel ;
    ibm:containsStageModel 
        :CallEmergency ,
        :StartEvacuatingPeople , 
        :ActivateSiren , 
        :OpenChimney , 
        :CloseFireDoors , 
        :CountPeople , 
        :StartExtinguishing , 
        :CheckForCompleteness , 
        :StartSearching , 
        :SayItsDone . 


# Guards
:G1 
    a ibm:Guard ;
    ibm:hasCondition :FireAlarmButtonPressed, :FireAlarmButtonPressedMOCK .

:G2
    a ibm:Guard ;
    ibm:hasCondition :HighTemperatureDetected, :HighTemperatureDetectedMOCK .

:G3 
    a ibm:Guard ;
    ibm:hasCondition :EmergencyArrived .

:G4
    a ibm:Guard ;
    ibm:hasCondition :PeopleEvacuated , :PeopleEvacuatedMOCK .

:G5
    a ibm:Guard ;
    ibm:hasCondition :PeopleCounted .

:G6
    a ibm:Guard ;
    ibm:hasCondition :PeopleIncompleteFireExtinguished .

:G7
    a ibm:Guard ;
    ibm:hasCondition :PeopleCompleteFireExtinguished .

:Gcount
    a ibm:Guard ;
    ibm:hasCondition :CountButtonPressed .


# Stages
:CallEmergency
    a ibm:StageModel ;
    ibm:hasGuard :G1 , :G2 ;
    ibm:hasMilestoneModel :C1 ;
    ibm:hasTaskModel :CallEmergencyTask .

:StartEvacuatingPeople
    a ibm:StageModel ;
    ibm:hasGuard :G1 , :G2 ;
    ibm:hasMilestoneModel :C2 ;
    ibm:hasTaskModel :StartEvacuatingPeopleTask .

:ActivateSiren
    a ibm:StageModel ;
    ibm:hasGuard :G1 , :G2 ;
    ibm:hasMilestoneModel :CX ;
    ibm:hasTaskModel :ActivateSirenTask .

:OpenChimney
    a ibm:StageModel ;
    ibm:hasGuard :G1 , :G2 ;
    ibm:hasMilestoneModel :CX ;
    ibm:hasTaskModel :OpenChimneyTask .

:CloseFireDoors
    a ibm:StageModel ;
    ibm:hasGuard :G1 , :G2 ;
    ibm:hasMilestoneModel :CX ;
    ibm:hasTaskModel :CloseFireDoorsTask .

:CountPeople
    a ibm:StageModel ;
    ibm:hasGuard :Gcount ;
    ibm:hasMilestoneModel :CXcount ;
    ibm:hasTaskModel :CountPeopleTask .

:StartExtinguishing
    a ibm:StageModel ;
    ibm:hasGuard :G3 ;
    ibm:hasMilestoneModel :C6 ;
    ibm:hasTaskModel :StartExtinguishingTask .

:CheckForCompleteness 
    a ibm:StageModel ;
    ibm:hasGuard :G4 ;
    ibm:hasMilestoneModel :Cincomplete , :Ccomplete ;
    ibm:hasTaskModel :CheckForCompletenessTask .

:StartSearching
    a ibm:StageModel ;
    ibm:hasGuard :G6 ;
    #ibm:hasMilestoneModel :C4b ;
    ibm:hasMilestoneModel :CX ;
    ibm:hasTaskModel :StartSearchingTask .

:SayItsDone
    a ibm:StageModel ;
    ibm:hasGuard :G7 ;
    ibm:hasMilestoneModel :CX ;
    ibm:hasTaskModel :SayItsDoneTask .

# Tasks
:CallEmergencyTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://t2-rest-speaker.lan> ;
        http:body "{\"http://schema.org/text\":\"Call Emergency!\"}"^^xsd:string
    ] .

:StartEvacuatingPeopleTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://t2-rest-speaker.lan> ;
        http:body "{\"http://schema.org/text\":\"Evacuate People!\"}"^^xsd:string
    ] .

:ActivateSirenTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://t2-rest-speaker.lan> ;
        http:body "{\"http://schema.org/text\":\"Activate Siren!\"}"^^xsd:string
    ] .

:OpenChimneyTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://t2-rest-speaker.lan> ;
        http:body "{\"http://schema.org/text\":\"Open the chimney!\"}"^^xsd:string
    ] .

:CloseFireDoorsTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://t2-rest-speaker.lan> ;
        http:body "{\"http://schema.org/text\":\"Close the fire doors!\"}"^^xsd:string
    ] .

:CountPeopleTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://mock-server.lan:3000/mock/cntPeople/add> ;
        http:body ""^^xsd:string
    ] .

:StartExtinguishingTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://t2-rest-speaker.lan> ;
        http:body "{\"http://schema.org/text\":\"Emergency arrived! Start extinguishing\"}"^^xsd:string
    ] .

:CheckForCompletenessTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://t2-rest-speaker.lan> ;
        http:body "{\"http://schema.org/text\":\"People are now evacuated. Check if everyone is here!\"}"^^xsd:string
    ] .

:StartSearchingTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://t2-rest-speaker.lan> ;
        http:body "{\"http://schema.org/text\":\"Oh jeez! There are people missing. Let's search them!\"}"^^xsd:string
    ] .

:SayItsDoneTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://t2-rest-speaker.lan> ;
        http:body "{\"http://schema.org/text\":\"Great! Everyone is save now.\"}"^^xsd:string
    ] .


# Milestones
:C1
    a ibm:MilestoneModel ;
    ibm:hasValidatingSentry :EmergencyArrived ;
    ibm:hasInvalidatingSentry :NoFireAnymore .

:C2
    a ibm:MilestoneModel ;
    ibm:hasValidatingSentry :PeopleEvacuated ;
    ibm:hasInvalidatingSentry :NoFireAnymore .

#:C3
#    a ibm:MilestoneModel ;
#    ibm:hasValidatingSentry :PeopleCounted ;
#   ibm:hasInvalidatingSentry :HighTemperatureDetected .

#:C4a 
#    a ibm:MilestoneModel ;
#    ibm:hasValidatingSentry :PeopleComplete ;
#    ibm:hasInvalidatingSentry :NoFireAnymore .

:Ccomplete 
    a ibm:MilestoneModel ;
    ibm:hasValidatingSentry :PeopleCountedAndComplete ;
    ibm:hasInvalidatingSentry :NoFireAnymore .

:Cincomplete 
    a ibm:MilestoneModel ;
    ibm:hasValidatingSentry :PeopleCountedAndIncomplete ;
    ibm:hasInvalidatingSentry :NoFireAnymore .

:C6
    a ibm:MilestoneModel ;
    ibm:hasValidatingSentry :FireExtinguished ;
    ibm:hasInvalidatingSentry :NoFireAnymore .

# dummy milestone for stages with no explicit milestone
:CX
    a ibm:MilestoneModel ;
    ibm:hasValidatingSentry :AlwaysTrue ;
    ibm:hasInvalidatingSentry :NoFireAnymore .

:CXcount
    a ibm:MilestoneModel ;
    ibm:hasValidatingSentry :AlwaysTrue ;
    ibm:hasInvalidatingSentry :CountButtonNotPressed .


# Sentries
:AlwaysTrue
    a sp:Ask ;
    sp:where ([
        sparql-result:boolean "true"^^xsd:boolean
    ]) .

:FireAlarmButtonPressed
    a sp:Ask ;
    sp:where ([
        sp:subject rfid-ambient:sensor ;
        sp:predicate rdf:value ;
        sp:object "true"^^xsd:boolean
    ]) .

:FireAlarmButtonPressedMOCK
    a sp:Ask ;
    sp:where ([
        sp:subject mock:AlarmButton ;
        sp:predicate <http://example.org/isPressed> ;
        sp:object "true"^^xsd:boolean
    ]) .

:HighTemperatureDetected
    a sp:Ask ;
    sp:where ([
        sp:subject ambient-light:value ;
        sp:predicate <http://example.org/isBright> ;
        sp:object "true"^^xsd:boolean 
    ]) .

:HighTemperatureDetectedMOCK
    a sp:Ask ;
    sp:where ([
        sp:subject mock:Temperature ;
        sp:predicate <http://example.org/isBright> ;
        sp:object "true"^^xsd:boolean 
    ]) .

:EmergencyArrived
    a sp:Ask ;
    sp:where ([
        sp:subject mock:Emergency ;
        sp:predicate <http://example.org/isArrived> ;
        sp:object "true"^^xsd:boolean
    ]) .

#:PeopleEvacuated
#    a sp:Ask ;
#    sp:where ([
#        sp:subject rfid-bright:sensor ;
#        sp:predicate rdf:value ;
#        sp:object "true"^^xsd:boolean 
#    ]) .

:PeopleEvacuated
    a sp:Ask ;
    sp:where ([
        sp:subject mock:People ;
        sp:predicate <http://example.org/evacuated> ;
        sp:object "true"^^xsd:boolean 
    ]) .


#:PeopleCounted
#    a sp:Ask ;
#    sp:where ([
#        sp:subject rfid-dark:sensor ;
#        sp:predicate rdf:value ;
#        sp:object "true"^^xsd:boolean
#    ]) .

:PeopleCounted
    a sp:Ask ;
    sp:where ([
        sp:subject mock:People ;
        sp:predicate <http://example.org/counted> ;
        sp:object "true"^^xsd:boolean
    ]) .

:PeopleCountedAndIncomplete
    a sp:Ask ;
    sp:where ([
        sp:subject mock:People ;
        sp:predicate <http://example.org/counted> ;
        sp:object "true"^^xsd:boolean
    ] [
        sp:subject mock:People ;
        sp:predicate <http://example.org/counted> ;
        sp:object "true"^^xsd:boolean
    ]) .

:PeopleIncompleteFireExtinguished
    a sp:Ask ;
    sp:where ([
        sp:subject mock:People ;
        sp:predicate <http://example.org/complete> ;
        sp:object "false"^^xsd:boolean
    ] [
        sp:subject mock:Fire ;
        sp:predicate <http://example.org/extinguished> ;
        sp:object "true"^^xsd:boolean
    ]) .

:PeopleCountedAndComplete
    a sp:Ask ;
    sp:where ([
        sp:subject mock:People ;
        sp:predicate <http://example.org/counted> ;
        sp:object "true"^^xsd:boolean
    ] [
        sp:subject mock:People ;
        sp:predicate <http://example.org/complete> ;
        sp:object "true"^^xsd:boolean  
    ]) .

:PeopleCompleteFireExtinguished
    a sp:Ask ;
    sp:where ([
        sp:subject mock:People ;
        sp:predicate <http://example.org/complete> ;
        sp:object "true"^^xsd:boolean  
    ] [
        sp:subject mock:Fire ;
        sp:predicate <http://example.org/extinguished> ;
        sp:object "true"^^xsd:boolean
    ]) .

:CountButtonPressed
    a sp:Ask ;
    sp:where ([
        sp:subject rfid-bright:sensor ;
        sp:predicate rdf:value ;
        sp:object "true"^^xsd:boolean 
    ]) .

:CountButtonNotPressed
    a sp:Ask ;
    sp:where ([
        sp:subject rfid-bright:sensor ;
        sp:predicate rdf:value ;
        sp:object "false"^^xsd:boolean 
    ]) .

:FireExtinguished
    a sp:Ask ;
    sp:where ([
        sp:subject mock:Fire ;
        sp:predicate <http://example.org/extinguished> ;
        sp:object "true"^^xsd:boolean
    ]) .

:NoFireAnymore 
    a sp:Ask ;
    sp:where ([
        sp:subject rfid-ambient:sensor ; # mockable ?
        sp:predicate rdf:value ;
        sp:object "false"^^xsd:boolean
    ] [
        sp:subject ambient-light:value ;
        sp:predicate <http://example.org/isBright> ;
        sp:object "false"^^xsd:boolean
    ]) .


