@prefix : <#> .
@prefix ibm: <http://tok450s.lan:8080/ldbbc/ibm-vocab.ttl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>.
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix sparql-result: <http://www.w3.org/2005/sparql-results#> .
@prefix sp: <http://spinrdf.org/sp#> .
@prefix http: <http://www.w3.org/2011/http#>.
@prefix http_m: <http://www.w3.org/2011/http-methods#>.


# Workflow-specific Prefixes
@prefix mock: <http://mock-server.lan:3000/mock#> .


# Workflow
:EvacuationWorkflowModel
    a ibm:WorkflowModel ;
    ibm:containsStageModel 
        :CallEmergency .
        :StartEvacuatingPeople , 
        :ActivateSiren , 
        :OpenChimney , 
        :CloseFireDoors , 
        :CountPeople , 
        :StartExtinguishing , 
        :CheckForCompleteness , 
        :StartSearching , 
        :SayItsDone . 


# Guards
:G1 
    a ibm:Guard ;
    ibm:hasCondition :FireAlarmButtonPressed .

:G2
    a ibm:Guard ;
    ibm:hasCondition :HighTemperatureDetected .

:G3 
    a ibm:Guard ;
    ibm:hasCondition :EmergencyArrived .

:G4
    a ibm:Guard ;
    ibm:hasCondition :PeopleEvacuated .

:G5
    a ibm:Guard ;
    ibm:hasCondition :PeopleCounted .

:G6
    a ibm:Guard ;
    ibm:hasCondition :PeopleIncompleteFireExtinguished .

:G7
    a ibm:Guard ;
    ibm:hasCondition :PeopleComplete .


# Stages
:CallEmergency
    a ibm:StageModel ;
    ibm:hasGuard :G1 , :G2 ;
    ibm:hasMilestoneModel :C1 ;
    ibm:hasTaskModel :CallEmergencyTask .

:StartEvacuatingPeople
    a ibm:StageModel ;
    ibm:hasGuard :G1 , :G2 ;
    ibm:hasMilestoneModel :C2 ;
    ibm:hasTaskModel :StartEvacuatingPeopleTask .

:ActivateSiren
    a ibm:StageModel ;
    ibm:hasGuard :G1 , :G2 ;
    ibm:hasMilestoneModel :CX ;
    ibm:hasTaskModel :ActivateSirenTask .

:OpenChimney
    a ibm:StageModel ;
    ibm:hasGuard :G1 , :G2 ;
    ibm:hasMilestoneModel :CX ;
    ibm:hasTaskModel :OpenChimneyTask .

:CloseFireDoors
    a ibm:StageModel ;
    ibm:hasGuard :G1 , :G2 ;
    ibm:hasMilestoneModel :CX ;
    ibm:hasTaskModel :CloseFireDoorsTask .

:CountPeople
    a ibm:StageModel ;
    ibm:hasGuard :G2 ;
    ibm:hasMilestoneModel :C3 ;
    ibm:hasTaskModel :CountPeopleTask .

:StartExtinguishing
    a ibm:StageModel ;
    ibm:hasGuard :G3 ;
    ibm:hasMilestoneModel :C6 ;
    ibm:hasTaskModel :StartExtinguishingTask .

:CheckForCompleteness 
    a ibm:StageModel ;
    ibm:hasGuard :G5 ;
    ibm:hasMilestoneModel :C4 , :C5 ;
    ibm:hasTaskModel :CheckForCompletenessTask .

:StartSearching
    a ibm:StageModel ;
    ibm:hasGuard :G6 ;
    ibm:hasMilestoneModel :C4 ;
    ibm:hasTaskModel :StartSearchingTask .

:SayItsDone
    a ibm:StageModel ;
    ibm:hasGuard :G7 ;
    ibm:hasMilestoneModel :CX ;
    ibm:hasTaskModel :SayItsDoneTask .

# Tasks
:CallEmergencyTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://t2-rest-speaker.lan> ;
        http:body "value=CallEmergencyTask"^^xsd:string
    ] .

:StartEvacuatingPeopleTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://t2-rest-speaker.lan> ;
        http:body "value=StartEvacuatingPeopleTask"^^xsd:string
    ] .

:ActivateSirenTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://t2-rest-speaker.lan> ;
        http:body "value=ActivateSirenTask"^^xsd:string
    ] .

:OpenChimneyTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://t2-rest-speaker.lan> ;
        http:body "value=OpenChimneyTask"^^xsd:string
    ] .

:CloseFireDoorsTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://t2-rest-speaker.lan> ;
        http:body "value=CloseFireDoorsTask"^^xsd:string
    ] .

:CountPeopleTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://t2-rest-speaker.lan> ;
        http:body "value=CountPeopleTask"^^xsd:string
    ] .

:StartExtinguishingTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://t2-rest-speaker.lan> ;
        http:body "value=StartExtinguishingTask"^^xsd:string
    ] .

:CheckForCompletenessTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://t2-rest-speaker.lan> ;
        http:body "value=CheckForCompletenessTask"^^xsd:string
    ] .

:StartSearchingTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://t2-rest-speaker.lan> ;
        http:body "value=StartSearchingTask"^^xsd:string
    ] .

:SayItsDoneTask 
    a ibm:TaskModel ;
    ibm:hasHttpRequest [
        a http:Request ;
        http:mthd http_m:POST ;
        http:requestURI <http://t2-rest-speaker.lan> ;
        http:body "value=SayItsDoneTask"^^xsd:string
    ] .


# Milestones
:C1
    a ibm:MilestoneModel ;
    ibm:hasAchievingSentry :EmergencyArrived .

:C2
    a ibm:MilestoneModel ;
    ibm:hasAchievingSentry :PeopleEvacuated .

:C3
    a ibm:MilestoneModel ;
    ibm:hasAchievingSentry :PeopleCounted .

:C4 
    a ibm:MilestoneModel ;
    ibm:hasAchievingSentry :PeopleComplete .

:C5 
    a ibm:MilestoneModel ;
    ibm:hasAchievingSentry :PeopleIncomplete .

:C6
    a ibm:MilestoneModel ;
    ibm:hasAchievingSentry :FireExtinguished .

# dummy milestone for stages with no explicit milestone
:CX
    a ibm:MilestoneModel ;
    ibm:hasAchievingSentry :AlwaysTrue .


# Sentries
:AlwaysTrue
    a sp:Ask ;
    sp:where ([
        sparql-result:boolean "true"^^xsd:boolean
    ]) .

:FireAlarmButtonPressed
    a sp:Ask ;
    sp:where ([
        sp:subject mock:AlarmButton ;
        sp:predicate <http://example.org/isPressed> ;
        sp:predicate "true"^^xsd:boolean
    ]) .

:HighTemperatureDetected
    a sp:Ask ;
    sp:where ([
        sp:subject mock:Temperature ;
        sp:predicate <http://example.org/isHigh> ;
        sp:object "true"^^xsd:boolean 
    ]) .

:EmergencyArrived
    a sp:Ask ;
    sp:where ([
        sp:subject mock:Emergency ;
        sp:subject <http://example.org/isArrived> ;
        sp:object "true"^^xsd:boolean
    ]) .

:PeopleEvacuated
    a sp:Ask ;
    sp:where ([
        sp:subject mock:People ;
        sp:predicate <http://example.org/evacuated> ;
        sp:object "true"^^xsd:boolean 
    ]) .

:PeopleCounted
    a sp:Ask ;
    sp:where ([
        sp:subject mock:People ;
        sp:predicate <http://example.org/counted> ;
        sp:object "true"^^xsd:boolean 
    ]) .

:PeopleIncompleteFireExtinguished
    a sp:Ask ;
    sp:where ([
        sp:subject mock:People ;
        sp:predicate <http://example.org/incomplete> ;
        sp:object "true"^^xsd:boolean
    ] [
        sp:subject mock:Fire ;
        sp:predicate <http://example.org/extinguished> ;
        sp:object "true"^^xsd:boolean
    ]) .

:PeopleComplete
    a sp:Ask ;
    sp:where ([
        sp:subject mock:People ;
        sp:predicate <http://example.org/complete> ;
        sp:object "true"^^xsd:boolean 
    ]) .

:PeopleIncomplete
    a sp:Ask ;
    sp:where ([
        sp:subject mock:People ;
        sp:predicate <http://example.org/incomplete> ;
        sp:object "true"^^xsd:boolean
    ]) .

:FireExtinguished
    a sp:Ask ;
    sp:where ([
        sp:subject mock:Fire ;
        sp:predicate <http://example.org/extinguished> ;
        sp:object "true"^^xsd:boolean
    ]) .

